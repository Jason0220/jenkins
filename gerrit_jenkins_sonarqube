pipeline {
    agent any

    environment {
        BUILD_WRAPPER="~/sonarqube/build-wrapper-linux-x86"
        SONAR_SCANNER="~/sonarqube/sonar-scanner"
        PATH="$PATH:$BUILD_WRAPPER:$SONAR_SCANNER/bin"
    }

    stages {
        stage('CODE_SYNC') {
            options {
                retry(20)
            }
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '$GERRIT_REFSPEC']], extensions: [], userRemoteConfigs: [[credentialsId: 'Jenkins', refspec: 'refs/changes/*:refs/changes/*', url: 'ssh://10.10.192.13:29418/Prophet_II']]])
            }
        }
        
        stage('BUILD') {
            steps {
                sh 'cp -r ~/tools/gcc-arm-none-eabi-10-2020-q4-major-linux tools/gcc'
                dir ('target/prophet') {
                    sh 'sed -i \'s#gcc-arm-none-eabi-10-2020-q4-major#gcc-arm-none-eabi-10-2020-q4-major-linux#\' rtconfig.py'
                    sh 'scons -c'
                    sh 'build-wrapper-linux-x86-64 --out-dir bw-output scons -j16'
                }
            }
        }

        stage('SCAN') {
            steps {
                withSonarQubeEnv('SonarQube_46') {
                    sh 'touch sonar-project.properties'
                    sh 'echo "sonar.projectKey=Prophet_II" >> sonar-project.properties'
                    sh 'sonar-scanner -Dsonar.projectKey=Prophet_II   -Dsonar.sources=.   -Dsonar.cfamily.build-wrapper-output=./bw-output   -Dsonar.host.url=http://10.10.192.46:9000/sonarqube   -Dsonar.login=sqp_7249ee07ae711b17c914e867a3d6fcb52a2965a8'
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    timeout(15) {
                        def qg = waitForQualityGate('SonarQube_46')
                        if (qg.status != 'OK') {
                            error "Failed Code scan ! failure: ${qg.status}"
                        }
                    }
                }
            }
        }
    }
}
