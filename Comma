pipeline {
    agent any

    environment {
        BUILD_WRAPPER="~/tools/build-wrapper-linux-x86"
        SONAR_SCANNER="~/tools/sonar-scanner/bin"
        PATH="$PATH:$BUILD_WRAPPER:$SONAR_SCANNER"
    }

    stages {
        stage('CODE_SYNC') {
            options {
                retry(20)
            }
            steps {
//              checkout([$class: 'GitSCM', branches: [[name: '**']], extensions: [], userRemoteConfigs: [[credentialsId: 'jenkins_13', url: 'ssh://10.10.192.13:29418/Comma']]])
                checkout([$class: 'GitSCM', branches: [[name: '$GERRIT_REFSPEC']], extensions: [], userRemoteConfigs: [[credentialsId: 'jenkins_13', refspec: 'refs/changes/*:refs/changes/*', url: 'ssh://10.10.192.13:29418/Comma']]])
            }
        }
        
        stage('BUILD') {
            steps {
//              sh 'cp -r ~/tools/gcc-arm-none-eabi-10-2020-q4-major-linux tools/gcc'
                dir ('target/nRF52840') {
                sh 'sed -i \'s#../../tools/gcc/gcc-arm-none-eabi-10-2020-q4-major/bin#/home/data0/jenkins/tools/gcc-arm-none-eabi-10-2020-q4-major-linux/bin#\' rtconfig.py'
                sh 'scons -c'
                sh 'build-wrapper-linux-x86-64 --out-dir ../../bw-output scons -j64'
                }
            }
            
        
        }
        
        stage('SCAN') {
            steps {
                withSonarQubeEnv('SonarQube_46') {
                    sh 'rm -rf sonar-project.properties'
                    sh 'touch sonar-project.properties'
                    sh 'echo "sonar.projectKey=Comma" >> sonar-project.properties'
                    sh 'echo "sonar.exclusions=drivers/algo_sensor/nnom/weights*.h,drivers/algo_sensor/nnom/test*.h,drivers/algo_sensor/nnom/cmsis_lib/**/*,drivers/algo_sensor/nnom/filter/**/*,drivers/algo_sensor/nnom/inc/**/*,drivers/algo_sensor/nnom/src/**/*,drivers/algo_sensor/nnom/port/**/*,drivers/algo_sensor/nnom/c_model/**/*,/tools/ai_tools/**/*,platform/**/*,third_party/**/*,tools/**/*,**/*.css,**/*.js,**/*.html,**/*.xml,**/*.py,**/*.php,**/*.yaml" >> sonar-project.properties'
                    sh 'sonar-scanner -Dsonar.projectKey=Comma   -Dsonar.sources=.   -Dsonar.cfamily.build-wrapper-output=./bw-output   -Dsonar.host.url=http://10.10.192.46:9000/sonarqube   -Dsonar.login=sqp_d59ae89dd1429e6dcaa1f10d241f5d61197cab92'
                }
            }
        }
        
        stage("Quality Gate") {
            steps {
                script {
                    timeout(20) {
                        def qg = waitForQualityGate('SonarQube_46')
                        if (qg.status != 'OK') {
                            error "Code scan failed! failure: ${qg.status}"
                        }
                    }
                }
            }
        }
    }
}
